/**
 * Entitas Generated Entity & Components for shmupwarz
 *
 * do not edit this file
 */
[indent=4]
namespace entitas

    struct Background
        active : bool

    struct Bounds
        x : int 
        y : int 
        w : int 
        h : int 

    struct Bullet
        active : bool

    struct Enemy1
        active : bool

    struct Enemy2
        active : bool

    struct Enemy3
        active : bool

    struct Expires
        value : double 

    struct Health
        current : double 
        maximum : double 

    struct Layer
        value : int 

    struct Position
        x : double 
        y : double 

    struct Scale
        x : double 
        y : double 

    struct Sound
        sound : sdx.audio.Sound 

    struct Sprite
        sprite : sdx.graphics.s2d.Sprite 

    struct Text
        text : string 
        sprite : sdx.graphics.s2d.Sprite 

    struct Tint
        r : int 
        g : int 
        b : int 
        a : int 

    struct Tween
        min : double 
        max : double 
        speed : double 
        repeat : bool 
        active : bool 

    struct Velocity
        x : double 
        y : double 

    struct Entity                       /* Core component: */  
        id          : int               /* sequentially assigned id# */
        name        : string            /* display name */
        pool        : int               /* pool entities by type */
        mask        : uint64            /* hasComponent bit array */
        background  : Background?
        bounds      : Bounds?
        bullet      : Bullet?
        enemy1      : Enemy1?
        enemy2      : Enemy2?
        enemy3      : Enemy3?
        expires     : Expires?
        health      : Health?
        layer       : Layer?
        position    : Position?
        scale       : Scale?
        sound       : Sound?
        sprite      : Sprite?
        text        : Text?
        tint        : Tint?
        tween       : Tween?
        velocity    : Velocity?

        def hasComponent(index : int) : bool
            return (__POW2__[index] & mask) != 0

        def hasComponents(indices : array of int) : bool
            for var index in indices do if (__POW2__[index] & mask) == 0 do return false
            return true

        def hasAnyComponent(indices : array of int) : bool
            for var index in indices do if (__POW2__[index] & mask) != 0 do return true
            return false

        def setId(id:int):Entity*
            this.id = id
            return &this

        def setName(name:string):Entity*
            this.name = name
            return &this

        def setActive(active:bool):Entity*
            if active do mask |= __ACTIVE__
            else do mask ^= __ACTIVE__
            return &this

        def setPool(pool:int):Entity*
            this.pool = pool
            return &this

        def isActive():bool
            return (mask & __ACTIVE__) == __ACTIVE__

        def toString():string
            var sb = new StringBuilder()
            sb.append(@"$id: ($name) ")
            var seperator = false
            for var i = 1 to (Components.COUNT-1)
                if hasComponent(i)
                    if seperator do sb.append(", ")
                    sb.append(ComponentString[i].replace("Component", ""))
                    seperator = true
            return sb.str

        /**
         * Components:
         */

        def setBackground(value:bool):Entity*
            if value
                this.background = { true }
                mask |= __BACKGROUND__
                World.onComponentAdded(&this, Components.BackgroundComponent)
            else
                this.background = null
                mask ^= __BACKGROUND__
                World.onComponentRemoved(&this, Components.BackgroundComponent)
            return &this

        def isBackground():bool
            if this.background == null do return false
            else do return true

        def hasBounds():bool
            return (mask & __BOUNDS__) != 0

        def addBounds(x:int,y:int,w:int,h:int):Entity* 
            if (mask & __BOUNDS__) != 0 do raise new Exception.EntityAlreadyHasComponent("BoundsComponent")
            this.bounds = { x, y, w, h }
            mask |= __BOUNDS__
            World.onComponentAdded(&this, Components.BoundsComponent)
            return &this

        def setBounds(x:int,y:int,w:int,h:int):Entity*
            if (mask & __BOUNDS__) == 0 do raise new Exception.EntityDoesNotHaveComponent("BoundsComponent")
            this.bounds.x = x
            this.bounds.y = y
            this.bounds.w = w
            this.bounds.h = h
            return &this

        def removeBounds():Entity*
            if (mask & __BOUNDS__) == 0 do raise new Exception.EntityDoesNotHaveComponent("BoundsComponent")
            this.bounds = null
            mask ^= __BOUNDS__
            World.onComponentRemoved(&this, Components.BoundsComponent)
            return &this

        def setBullet(value:bool):Entity*
            if value
                this.bullet = { true }
                mask |= __BULLET__
                World.onComponentAdded(&this, Components.BulletComponent)
            else
                this.bullet = null
                mask ^= __BULLET__
                World.onComponentRemoved(&this, Components.BulletComponent)
            return &this

        def isBullet():bool
            if this.bullet == null do return false
            else do return true

        def setEnemy1(value:bool):Entity*
            if value
                this.enemy1 = { true }
                mask |= __ENEMY1__
                World.onComponentAdded(&this, Components.Enemy1Component)
            else
                this.enemy1 = null
                mask ^= __ENEMY1__
                World.onComponentRemoved(&this, Components.Enemy1Component)
            return &this

        def isEnemy1():bool
            if this.enemy1 == null do return false
            else do return true

        def setEnemy2(value:bool):Entity*
            if value
                this.enemy2 = { true }
                mask |= __ENEMY2__
                World.onComponentAdded(&this, Components.Enemy2Component)
            else
                this.enemy2 = null
                mask ^= __ENEMY2__
                World.onComponentRemoved(&this, Components.Enemy2Component)
            return &this

        def isEnemy2():bool
            if this.enemy2 == null do return false
            else do return true

        def setEnemy3(value:bool):Entity*
            if value
                this.enemy3 = { true }
                mask |= __ENEMY3__
                World.onComponentAdded(&this, Components.Enemy3Component)
            else
                this.enemy3 = null
                mask ^= __ENEMY3__
                World.onComponentRemoved(&this, Components.Enemy3Component)
            return &this

        def isEnemy3():bool
            if this.enemy3 == null do return false
            else do return true

        def hasExpires():bool
            return (mask & __EXPIRES__) != 0

        def addExpires(value:double):Entity* 
            if (mask & __EXPIRES__) != 0 do raise new Exception.EntityAlreadyHasComponent("ExpiresComponent")
            this.expires = { value }
            mask |= __EXPIRES__
            World.onComponentAdded(&this, Components.ExpiresComponent)
            return &this

        def setExpires(value:double):Entity*
            if (mask & __EXPIRES__) == 0 do raise new Exception.EntityDoesNotHaveComponent("ExpiresComponent")
            this.expires.value = value
            return &this

        def removeExpires():Entity*
            if (mask & __EXPIRES__) == 0 do raise new Exception.EntityDoesNotHaveComponent("ExpiresComponent")
            this.expires = null
            mask ^= __EXPIRES__
            World.onComponentRemoved(&this, Components.ExpiresComponent)
            return &this

        def hasHealth():bool
            return (mask & __HEALTH__) != 0

        def addHealth(current:double,maximum:double):Entity* 
            if (mask & __HEALTH__) != 0 do raise new Exception.EntityAlreadyHasComponent("HealthComponent")
            this.health = { current, maximum }
            mask |= __HEALTH__
            World.onComponentAdded(&this, Components.HealthComponent)
            return &this

        def setHealth(current:double,maximum:double):Entity*
            if (mask & __HEALTH__) == 0 do raise new Exception.EntityDoesNotHaveComponent("HealthComponent")
            this.health.current = current
            this.health.maximum = maximum
            return &this

        def removeHealth():Entity*
            if (mask & __HEALTH__) == 0 do raise new Exception.EntityDoesNotHaveComponent("HealthComponent")
            this.health = null
            mask ^= __HEALTH__
            World.onComponentRemoved(&this, Components.HealthComponent)
            return &this

        def hasLayer():bool
            return (mask & __LAYER__) != 0

        def addLayer(value:int):Entity* 
            if (mask & __LAYER__) != 0 do raise new Exception.EntityAlreadyHasComponent("LayerComponent")
            this.layer = { value }
            mask |= __LAYER__
            World.onComponentAdded(&this, Components.LayerComponent)
            return &this

        def setLayer(value:int):Entity*
            if (mask & __LAYER__) == 0 do raise new Exception.EntityDoesNotHaveComponent("LayerComponent")
            this.layer.value = value
            return &this

        def removeLayer():Entity*
            if (mask & __LAYER__) == 0 do raise new Exception.EntityDoesNotHaveComponent("LayerComponent")
            this.layer = null
            mask ^= __LAYER__
            World.onComponentRemoved(&this, Components.LayerComponent)
            return &this

        def hasPosition():bool
            return (mask & __POSITION__) != 0

        def addPosition(x:double,y:double):Entity* 
            if (mask & __POSITION__) != 0 do raise new Exception.EntityAlreadyHasComponent("PositionComponent")
            this.position = { x, y }
            mask |= __POSITION__
            World.onComponentAdded(&this, Components.PositionComponent)
            return &this

        def setPosition(x:double,y:double):Entity*
            if (mask & __POSITION__) == 0 do raise new Exception.EntityDoesNotHaveComponent("PositionComponent")
            this.position.x = x
            this.position.y = y
            return &this

        def removePosition():Entity*
            if (mask & __POSITION__) == 0 do raise new Exception.EntityDoesNotHaveComponent("PositionComponent")
            this.position = null
            mask ^= __POSITION__
            World.onComponentRemoved(&this, Components.PositionComponent)
            return &this

        def hasScale():bool
            return (mask & __SCALE__) != 0

        def addScale(x:double,y:double):Entity* 
            if (mask & __SCALE__) != 0 do raise new Exception.EntityAlreadyHasComponent("ScaleComponent")
            this.scale = { x, y }
            mask |= __SCALE__
            World.onComponentAdded(&this, Components.ScaleComponent)
            return &this

        def setScale(x:double,y:double):Entity*
            if (mask & __SCALE__) == 0 do raise new Exception.EntityDoesNotHaveComponent("ScaleComponent")
            this.scale.x = x
            this.scale.y = y
            return &this

        def removeScale():Entity*
            if (mask & __SCALE__) == 0 do raise new Exception.EntityDoesNotHaveComponent("ScaleComponent")
            this.scale = null
            mask ^= __SCALE__
            World.onComponentRemoved(&this, Components.ScaleComponent)
            return &this

        def hasSound():bool
            return (mask & __SOUND__) != 0

        def addSound(sound:sdx.audio.Sound):Entity* 
            if (mask & __SOUND__) != 0 do raise new Exception.EntityAlreadyHasComponent("SoundComponent")
            this.sound = { sound }
            mask |= __SOUND__
            World.onComponentAdded(&this, Components.SoundComponent)
            return &this

        def setSound(sound:sdx.audio.Sound):Entity*
            if (mask & __SOUND__) == 0 do raise new Exception.EntityDoesNotHaveComponent("SoundComponent")
            this.sound.sound = sound
            return &this

        def removeSound():Entity*
            if (mask & __SOUND__) == 0 do raise new Exception.EntityDoesNotHaveComponent("SoundComponent")
            this.sound = null
            mask ^= __SOUND__
            World.onComponentRemoved(&this, Components.SoundComponent)
            return &this

        def hasSprite():bool
            return (mask & __SPRITE__) != 0

        def addSprite(sprite:sdx.graphics.s2d.Sprite):Entity* 
            if (mask & __SPRITE__) != 0 do raise new Exception.EntityAlreadyHasComponent("SpriteComponent")
            this.sprite = { sprite }
            mask |= __SPRITE__
            World.onComponentAdded(&this, Components.SpriteComponent)
            return &this

        def setSprite(sprite:sdx.graphics.s2d.Sprite):Entity*
            if (mask & __SPRITE__) == 0 do raise new Exception.EntityDoesNotHaveComponent("SpriteComponent")
            this.sprite.sprite = sprite
            return &this

        def removeSprite():Entity*
            if (mask & __SPRITE__) == 0 do raise new Exception.EntityDoesNotHaveComponent("SpriteComponent")
            this.sprite = null
            mask ^= __SPRITE__
            World.onComponentRemoved(&this, Components.SpriteComponent)
            return &this

        def hasText():bool
            return (mask & __TEXT__) != 0

        def addText(text:string,sprite:sdx.graphics.s2d.Sprite):Entity* 
            if (mask & __TEXT__) != 0 do raise new Exception.EntityAlreadyHasComponent("TextComponent")
            this.text = { text, sprite }
            mask |= __TEXT__
            World.onComponentAdded(&this, Components.TextComponent)
            return &this

        def setText(text:string,sprite:sdx.graphics.s2d.Sprite):Entity*
            if (mask & __TEXT__) == 0 do raise new Exception.EntityDoesNotHaveComponent("TextComponent")
            this.text.text = text
            this.text.sprite = sprite
            return &this

        def removeText():Entity*
            if (mask & __TEXT__) == 0 do raise new Exception.EntityDoesNotHaveComponent("TextComponent")
            this.text = null
            mask ^= __TEXT__
            World.onComponentRemoved(&this, Components.TextComponent)
            return &this

        def hasTint():bool
            return (mask & __TINT__) != 0

        def addTint(r:int,g:int,b:int,a:int):Entity* 
            if (mask & __TINT__) != 0 do raise new Exception.EntityAlreadyHasComponent("TintComponent")
            this.tint = { r, g, b, a }
            mask |= __TINT__
            World.onComponentAdded(&this, Components.TintComponent)
            return &this

        def setTint(r:int,g:int,b:int,a:int):Entity*
            if (mask & __TINT__) == 0 do raise new Exception.EntityDoesNotHaveComponent("TintComponent")
            this.tint.r = r
            this.tint.g = g
            this.tint.b = b
            this.tint.a = a
            return &this

        def removeTint():Entity*
            if (mask & __TINT__) == 0 do raise new Exception.EntityDoesNotHaveComponent("TintComponent")
            this.tint = null
            mask ^= __TINT__
            World.onComponentRemoved(&this, Components.TintComponent)
            return &this

        def hasTween():bool
            return (mask & __TWEEN__) != 0

        def addTween(min:double,max:double,speed:double,repeat:bool,active:bool):Entity* 
            if (mask & __TWEEN__) != 0 do raise new Exception.EntityAlreadyHasComponent("TweenComponent")
            this.tween = { min, max, speed, repeat, active }
            mask |= __TWEEN__
            World.onComponentAdded(&this, Components.TweenComponent)
            return &this

        def setTween(min:double,max:double,speed:double,repeat:bool,active:bool):Entity*
            if (mask & __TWEEN__) == 0 do raise new Exception.EntityDoesNotHaveComponent("TweenComponent")
            this.tween.min = min
            this.tween.max = max
            this.tween.speed = speed
            this.tween.repeat = repeat
            this.tween.active = active
            return &this

        def removeTween():Entity*
            if (mask & __TWEEN__) == 0 do raise new Exception.EntityDoesNotHaveComponent("TweenComponent")
            this.tween = null
            mask ^= __TWEEN__
            World.onComponentRemoved(&this, Components.TweenComponent)
            return &this

        def hasVelocity():bool
            return (mask & __VELOCITY__) != 0

        def addVelocity(x:double,y:double):Entity* 
            if (mask & __VELOCITY__) != 0 do raise new Exception.EntityAlreadyHasComponent("VelocityComponent")
            this.velocity = { x, y }
            mask |= __VELOCITY__
            World.onComponentAdded(&this, Components.VelocityComponent)
            return &this

        def setVelocity(x:double,y:double):Entity*
            if (mask & __VELOCITY__) == 0 do raise new Exception.EntityDoesNotHaveComponent("VelocityComponent")
            this.velocity.x = x
            this.velocity.y = y
            return &this

        def removeVelocity():Entity*
            if (mask & __VELOCITY__) == 0 do raise new Exception.EntityDoesNotHaveComponent("VelocityComponent")
            this.velocity = null
            mask ^= __VELOCITY__
            World.onComponentRemoved(&this, Components.VelocityComponent)
            return &this


    /**
     *  Component bit masks
     */
    const __BACKGROUND__:uint64 = 0x0000000000000001
    const __BOUNDS__:uint64     = 0x0000000000000002
    const __BULLET__:uint64     = 0x0000000000000004
    const __ENEMY1__:uint64     = 0x0000000000000008
    const __ENEMY2__:uint64     = 0x0000000000000010
    const __ENEMY3__:uint64     = 0x0000000000000020
    const __EXPIRES__:uint64    = 0x0000000000000040
    const __HEALTH__:uint64     = 0x0000000000000080
    const __LAYER__:uint64      = 0x0000000000000100
    const __POSITION__:uint64   = 0x0000000000000200
    const __SCALE__:uint64      = 0x0000000000000400
    const __SOUND__:uint64      = 0x0000000000000800
    const __SPRITE__:uint64     = 0x0000000000001000
    const __TEXT__:uint64       = 0x0000000000002000
    const __TINT__:uint64       = 0x0000000000004000
    const __TWEEN__:uint64      = 0x0000000000008000
    const __VELOCITY__:uint64   = 0x0000000000010000
    const __ACTIVE__:uint64     = 0x8000000000000000
    
    /**
    * Component names
    */
    const ComponentString: array of string = {
        "CoreComponent",
        "BackgroundComponent",
        "BoundsComponent",
        "BulletComponent",
        "Enemy1Component",
        "Enemy2Component",
        "Enemy3Component",
        "ExpiresComponent",
        "HealthComponent",
        "LayerComponent",
        "PositionComponent",
        "ScaleComponent",
        "SoundComponent",
        "SpriteComponent",
        "TextComponent",
        "TintComponent",
        "TweenComponent",
        "VelocityComponent",
        ""
    }

    /**
    * Components
    */
    enum Components
        BackgroundComponent = 1
        BoundsComponent
        BulletComponent
        Enemy1Component
        Enemy2Component
        Enemy3Component
        ExpiresComponent
        HealthComponent
        LayerComponent
        PositionComponent
        ScaleComponent
        SoundComponent
        SpriteComponent
        TextComponent
        TintComponent
        TweenComponent
        VelocityComponent
        COUNT

